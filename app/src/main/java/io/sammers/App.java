/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.sammers;

import com.datastax.oss.driver.api.core.CqlSession;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.stargate.grpc.StargateBearerToken;
import io.stargate.proto.QueryOuterClass;
import io.stargate.proto.StargateGrpc;
import io.vertx.cassandra.CassandraClientOptions;
import io.vertx.rxjava3.cassandra.CassandraClient;
import io.vertx.rxjava3.core.Vertx;

import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

public class App {

    public static Vertx vertx;
    public static String CASSANDRA = "cassandra";
    public static CassandraClient vertxRx3;
    protected static final CqlSession CQL_SESSION;

    private static final String token;

    private static final StargateGrpc.StargateStub stargateStub;

    private static final StargateGrpc.StargateBlockingStub stargateBlockingStub;
    private static final Random random = new Random();

    private static PreparedStatement insertpreprd;

    static {
        token = Auth.getTokenFromAuthEndpoint(CASSANDRA, CASSANDRA, "http://localhost:8081/v1/auth");
        vertx = Vertx.vertx();
        CQL_SESSION = CqlSession.builder()
            .addContactPoint(new InetSocketAddress("localhost", 9044))
            .withLocalDatacenter("datacenter1")
            .build();
        CassandraClientOptions options = new CassandraClientOptions()
            .addContactPoint(new InetSocketAddress("localhost", 9044))
            .setUsername(CASSANDRA)
            .setPassword(CASSANDRA);
        options.dataStaxClusterBuilder().withLocalDatacenter("datacenter1");
        vertxRx3 = CassandraClient.create(vertx, options);
        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 8090).usePlaintext().build();
        stargateStub = StargateGrpc.newStub(channel)
            .withDeadlineAfter(10, TimeUnit.SECONDS)
            .withCallCredentials(new StargateBearerToken(token));
        stargateBlockingStub =
            StargateGrpc.newBlockingStub(channel)
                .withDeadlineAfter(1000, TimeUnit.SECONDS)
                .withCallCredentials(new StargateBearerToken(token));
    }

    public static void main(String[] args) throws Exception {
        latencyTest(1000, 3000, "Grpc Stargate select release", App::grpcStargateSelectRelease0);
        latencyTest(1000, 3000, "Native select release", App::nativeSelectRelease0);
        insertpreprd = vertxRx3.rxPrepare("INSERT INTO ks.test (k, v) VALUES (?, ?)").blockingGet();
        latencyTest(1000, 3000, "Native insert", App::nativeInsert0);
        latencyTest(1000, 3000, "Grpc Stargate insert", App::grpcStargateInsert0);
    }

    private static void latencyTest(int times, int warmup, String name, Runnable code) throws InterruptedException {
        //warmup
        List<Long> latenciesList = new ArrayList<>(times);
        for (int i = 0; i < warmup; i++) {
            code.run();
        }
        Thread.sleep(1000);
        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        for (int i = 0; i < times; i++) {
            long tick = System.nanoTime();
            code.run();
            long latency = System.nanoTime() - tick;
            max = Long.max(max, latency);
            min = Long.min(min, latency);
            latenciesList.add(latency);
        }
        var avg = latenciesList.stream().mapToLong(x -> x).average().orElse(0);
        var p50 = latenciesList.stream().sorted().skip((long) (0.90d * times)).findFirst().orElse(-1L);
        var p90 = latenciesList.stream().sorted().skip((long) (0.90d * times)).findFirst().orElse(-1L);
        var p95 = latenciesList.stream().sorted().skip((long) (0.95d * times)).findFirst().orElse(-1L);
        var p99 = latenciesList.stream().sorted().skip((long) (0.99d * times)).findFirst().orElse(-1L);
        System.out.println(
            String.format("%s x%s, avg=%s, p50=%s, p90=%s p95=%s p99=%s, min=%s, max=%s",
                name,
                times,
                msFromNano((long) avg),
                msFromNano(p50),
                msFromNano(p90),
                msFromNano(p95),
                msFromNano(p99),
                msFromNano(min),
                msFromNano(max)
            )
        );
    }

    private static String msFromNano(Long nano) {
        return TimeUnit.NANOSECONDS.toMillis(nano) + "," + TimeUnit.NANOSECONDS.toMicros(nano) % 1000 + "ms";
    }

    private static void nativeSelectRelease0() {
        vertxRx3.rxExecute("select release_version from system.local").blockingGet();
    }
    private static void nativeInsert0() {
        vertxRx3.rxExecute(insertpreprd.bind(UUID.randomUUID().toString(), random.nextInt())).blockingGet();
    }

    private static void grpcStargateInsert0() {
        stargateBlockingStub.executeQuery(
            QueryOuterClass.Query.newBuilder()
                .setCql(String.format("INSERT INTO ks.test (k, v) VALUES ('%s', %s)", UUID.randomUUID(), random.nextInt()))
                .build()
        );
    }

    private static void grpcStargateSelectRelease0() {
        stargateBlockingStub.executeQuery(
            QueryOuterClass.Query.newBuilder().setCql("select release_version from system.local").build()
        );
    }
}
